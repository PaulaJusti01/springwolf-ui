{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/channels/channel-main/channel-main.component.ts","webpack:///src/app/channels/channel-main/channel-main.component.html","webpack:///src/app/channels/channels.component.ts","webpack:///src/app/channels/channels.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/info/info.component.ts","webpack:///src/app/info/info.component.html","webpack:///src/app/material.module.ts","webpack:///src/app/schemas/schema/schema.component.ts","webpack:///src/app/schemas/schemas.component.ts","webpack:///src/app/schemas/schemas.component.html","webpack:///src/app/servers/servers.component.ts","webpack:///src/app/servers/servers.component.html","webpack:///src/app/shared/asyncapi.service.ts","webpack:///src/app/shared/mock-server.ts","webpack:///src/app/shared/models/example.model.ts","webpack:///src/app/shared/publisher.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useValue","languages","typescript","production","forRoot","delay","declarations","imports","providers","bootstrap","ChannelMainComponent","asyncApiService","publisherService","snackBar","getAsyncApi","subscribe","asyncapi","schema","components","schemas","get","operation","message","defaultExample","example","exampleTextAreaLineCount","lineCount","bindings","kafkaBinding","groupId","kafka","text","split","length","json","JSON","parse","publishToKafka","channelName","_","open","duration","error","recalculateLineCount","publish","ChannelsComponent","channels","HeaderComponent","InfoComponent","info","modules","MaterialModule","SchemaComponent","schemaProperties","stringify","properties","template","styles","SchemasComponent","ServersComponent","servers","AsyncApiService","http","pipe","item","toAsyncApi","mapServers","mapChannels","mapSchemas","s","Map","Object","entries","forEach","k","v","set","description","mapOperation","isSubscribe","type","MockServer","reqInfo","console","log","url","utils","createResponse$","status","OK","body","undefined","Example","exampleObject","value","PublisherService","topic","payload","params","post","environment","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'springwolf';\n}\n","<app-header></app-header>\n<main fxLayout=\"column\" fxLayoutGap=\"24px\">\n    <app-info></app-info>\n    <app-servers></app-servers>\n    <app-channels></app-channels>\n    <app-schemas></app-schemas>\n</main>\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\nimport { environment } from './../environments/environment';\nimport { AppComponent } from './app.component';\nimport { ChannelMainComponent } from './channels/channel-main/channel-main.component';\nimport { ChannelsComponent } from './channels/channels.component';\nimport { HeaderComponent } from './header/header.component';\nimport { InfoComponent } from './info/info.component';\nimport { MaterialModule } from './material.module';\nimport { SchemaComponent } from './schemas/schema/schema.component';\nimport { SchemasComponent } from './schemas/schemas.component';\nimport { ServersComponent } from './servers/servers.component';\nimport { AsyncApiService } from './shared/asyncapi.service';\nimport { MockServer } from './shared/mock-server';\nimport { PublisherService } from './shared/publisher.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    InfoComponent,\n    ServersComponent,\n    ChannelsComponent,\n    ChannelMainComponent,\n    SchemasComponent,\n    SchemaComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    HighlightModule,\n    HttpClientModule,\n    environment.production ? [] : HttpClientInMemoryWebApiModule.forRoot(MockServer, { delay: 100 })\n  ],\n  providers: [\n    AsyncApiService,\n    PublisherService,\n    {\n      provide: HIGHLIGHT_OPTIONS,\n      useValue: {\n        languages: function () {\n          return { typescript: () => import('highlight.js/lib/languages/typescript') };\n        }\n      }\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { AsyncApiService } from 'src/app/shared/asyncapi.service';\nimport { Example } from 'src/app/shared/models/example.model';\nimport { PublisherService } from 'src/app/shared/publisher.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Operation } from 'src/app/shared/models/channel.model';\n\n@Component({\n  selector: 'app-channel-main',\n  templateUrl: './channel-main.component.html',\n  styleUrls: ['./channel-main.component.css']\n})\nexport class ChannelMainComponent implements OnInit {\n\n  @Input() channelName: string;\n  @Input() operation: Operation;\n  defaultExample: Example;\n  exampleTextAreaLineCount: number;\n  schema: any;\n\n  kafkaBinding?: { groupId?: string }\n\n  constructor(\n    private asyncApiService: AsyncApiService,\n    private publisherService: PublisherService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => {\n        this.schema = asyncapi.components.schemas.get(this.operation.message.title);\n        this.defaultExample = this.schema.example;\n        this.exampleTextAreaLineCount = this.defaultExample.lineCount;\n      }\n    );\n\n    if (\"kafka\" in this.operation.bindings) {\n      this.kafkaBinding = { groupId: this.operation.bindings.kafka.groupId.enum[0] } \n    }\n  }\n\n  recalculateLineCount(text): void {\n    this.exampleTextAreaLineCount = text.split('\\n').length;\n  }\n\n  publish(example: string): void {\n    try {\n      const json = JSON.parse(example);\n\n      this.publisherService.publishToKafka(this.channelName, json).subscribe(\n        _ => this.snackBar.open('Example payload sent to: ' + this.channelName, 'PUBLISHED', {\n          duration: 3000\n        })\n      );\n    } catch(error) {\n      this.snackBar.open('Example payload is not valid', 'ERROR', {\n        duration: 3000\n      })\n    }\n  }\n\n}\n","<section>\n    <mat-divider></mat-divider>\n    <div fxLayout fxLayoutAlign=\"flex-start center\" fxLayoutGap=\"12px\">\n        <div class=\"property-badge\">Payload</div>\n        <h4>{{ operation.message.title }}</h4>\n        <div class=\"payload-name\">{{ operation.message.name }}</div>\n    </div>\n    <div *ngIf=\"kafkaBinding.groupId\" fxLayout fxLayoutAlign=\"flex-start center\" fxLayoutGap=\"12px\">\n        <div class=\"property-badge\">Group ID</div>\n        <h4>{{ kafkaBinding.groupId }}</h4>\n    </div>\n    <mat-tab-group animationDuration=\"0ms\">\n        <mat-tab label=\"Schema\">\n            <app-schema *ngIf=\"schema\" [schema]=\"schema\"></app-schema>\n        </mat-tab>\n        <mat-tab label=\"Example\">\n            <textarea spellcheck=\"false\" #exampleTextArea [rows]=\"exampleTextAreaLineCount\"\n                [value]=\"defaultExample?.value\" (keyup)=\"recalculateLineCount(exampleTextArea.value)\"></textarea>\n            <div fxLayout fxLayoutGap=\"8px\">\n                <button mat-raised-button color=\"primary\" (click)=\"publish(exampleTextArea.value)\">\n                    Publish\n                </button>\n                <button mat-raised-button color=\"primary\"\n                    (click)=\"exampleTextArea.value = defaultExample.value; exampleTextAreaLineCount=defaultExample.lineCount\">\n                    Default\n                </button>\n                <button mat-raised-button color=\"primary\" [cdkCopyToClipboard]=\"exampleTextArea.value\">Copy</button>\n            </div>\n        </mat-tab>\n    </mat-tab-group>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport { Channel } from '../shared/models/channel.model';\nimport { subscribeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent implements OnInit {\n\n  channels: Map<String, Channel>;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => this.channels = asyncapi.channels\n    );\n  }\n\n}\n","<h1>Channels</h1>\n<mat-accordion>\n    <mat-expansion-panel *ngFor=\"let channel of channels | keyvalue\">\n        <mat-expansion-panel-header>\n            <mat-panel-title fxLayout fxLayoutAlign=\"flex-start center\" fxLayoutGap=\"16px\">\n                <div class=\"operation-badge\">{{ channel.value.operation.type === \"SUBSCRIBE\" ? \"CONSUMER\" : \"PRODUCER\" }}</div>\n                <h3>{{ channel.key }}</h3>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <app-channel-main [channelName]=\"channel.key\" [operation]=\"channel.value.operation\"></app-channel-main>\n    </mat-expansion-panel>\n</mat-accordion>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar color=\"primary\" fxLayout fxLayoutAlign=\"space-between center\">\n    <div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n        <a href=\"https://www.asyncapi.com\">\n            <img class=\"logo\" src=\"../../assets/asyncapi-logo.png\" alt=\"AsyncAPI logo\">\n        </a>\n        <h2>springwolf</h2>\n    </div>\n    <a href=\"https://github.com/stavshamir/springwolf\">\n        <i class=\"fa fa-github fa-2x\"></i>\n    </a>\n</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\nimport { Info } from '../shared/models/info.model';\nimport { AsyncApiService } from '../shared/asyncapi.service';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.css']\n})\nexport class InfoComponent implements OnInit {\n\n  info: Info;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => this.info = asyncapi.info\n    );\n  }\n\n}\n","<h1>{{ info?.title }}</h1>\n<h5>API VERSION {{ info?.version }}</h5>\n<p *ngIf=\"info?.description\">{{ info.description }}</p>","import { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nconst modules = [\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatTabsModule,\n    MatDividerModule,\n    ClipboardModule,\n    MatSnackBarModule\n]\n\n@NgModule({\n    imports: modules,\n    exports: modules\n})\nexport class MaterialModule { }\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-schema',\n  template: '<pre><code [highlight]=\"schemaProperties\"></code></pre>',\n  styles: [`code {\n    margin-top: 16px;\n    padding: 8px;\n    border-radius: 4px;\n  }`]\n})\nexport class SchemaComponent implements OnInit {\n\n  @Input() schema: any;\n  schemaProperties: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.schemaProperties = JSON.stringify(this.schema.properties, null, 2);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport { Schema } from '../shared/models/schema.model';\n\n@Component({\n  selector: 'app-schemas',\n  templateUrl: './schemas.component.html',\n  styleUrls: ['./schemas.component.css']\n})\nexport class SchemasComponent implements OnInit {\n  \n  schemas: Map<string, Schema>;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => this.schemas = asyncapi.components.schemas\n    );\n  }\n\n}\n","<h1>Schemas</h1>\n<mat-accordion>\n    <mat-expansion-panel *ngFor=\"let schema of schemas | keyvalue\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <h3>{{ schema.key }}</h3>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <app-schema [schema]=\"schema?.value\"></app-schema>\n    </mat-expansion-panel>\n</mat-accordion>","import { Component, OnInit } from '@angular/core';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport { Server } from '../shared/models/server.model';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements OnInit {\n\n  servers: Map<String, Server>;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => this.servers = asyncapi.servers\n    );\n  }\n\n}\n","<h1>Servers</h1>\n<mat-card *ngFor=\"let server of servers | keyvalue\">\n    <mat-card-title>{{ server.key }}</mat-card-title>\n    <mat-card-content>\n        {{ server.value.url }}\n    </mat-card-content>\n</mat-card>","import { AsyncApi } from './models/asyncapi.model';\nimport { Server } from './models/server.model';\nimport { Channel, Message, Operation } from './models/channel.model';\nimport { Schema } from './models/schema.model';\nimport { Example } from './models/example.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Info } from './models/info.model';\n\ninterface ServerAsyncApi {\n    asyncapi: string;\n    info: Info;\n    servers: {\n        [key: string]: {\n            url: string;\n            protocol: string;\n        };\n    };\n    channels: {\n        [key: string]: {\n            description?: string;\n            subscribe?: {\n                message: Message;\n                bindings?: any;\n            };\n            publish?: {\n                message: Message;\n                bindings?: any;\n            };\n        };\n    };\n    components: {\n        schemas: {\n            [key: string]: {\n                type: string;\n                properties: object;\n                example: object;\n            };\n        };\n    };\n}\n\n@Injectable()\nexport class AsyncApiService {\n\n    constructor(private http: HttpClient) { }\n\n    public getAsyncApi(): Observable<AsyncApi> {\n        return this.http\n            .get<ServerAsyncApi>('/asyncapi/docs')\n            .pipe(map(item => this.toAsyncApi(item)));\n    }\n\n    toAsyncApi(item: ServerAsyncApi): AsyncApi {\n        return {\n            info: item.info,\n            servers: this.mapServers(item.servers),\n            channels: this.mapChannels(item.channels),\n            components: {\n                schemas: this.mapSchemas(item.components.schemas)\n            }\n        };\n    }\n\n    private mapServers(servers: { [key: string]: Server }): Map<string, Server> {\n        const s = new Map<string, Server>();\n        Object.entries(servers).forEach(([k, v]) => s.set(k, v));\n        return s;\n    }\n\n    private mapChannels(channels: {\n        [key: string]: {\n            description?: string;\n            subscribe?: {\n                message: Message;\n                bindings?: any;\n            };\n            publish?: {\n                message: Message;\n                bindings?: any;\n            };\n        }\n    }): Map<string, Channel> {\n        const s = new Map<string, Channel>();\n        Object.entries(channels).forEach(([k, v]) => s.set(k, {\n            description: v.description,\n            operation: this.mapOperation(v.subscribe, v.publish)\n        }));\n        return s;\n    }\n\n    private mapOperation(subscribe: { message: Message; bindings?: any; }, publish: { message: Message; bindings?: any; }): Operation {\n        const isSubscribe = subscribe !== null;\n        if (isSubscribe) {\n            return {\n                type: \"SUBSCRIBE\",\n                message: subscribe.message,\n                bindings: subscribe.bindings\n            }\n        } else {\n            return {\n                type: \"PUBLISH\",\n                message: publish.message,\n                bindings: publish.bindings\n            }\n        }\n    }\n\n    mapSchemas(schemas: { [key: string]: { type: string; properties: object; example: object; } }): Map<string, Schema> {\n        const s = new Map<string, Schema>();\n        Object.entries(schemas).forEach(([k, v]) => s.set(k, {\n            type: v.type,\n            properties: v.properties,\n            example: new Example(v.example)\n        }));\n        return s;\n    }\n\n}","import { InMemoryDbService, RequestInfo, STATUS } from 'angular-in-memory-web-api';\nimport mockAsyncApi from './mock.json';\n\nexport class MockServer implements InMemoryDbService {\n  createDb() {\n    return {kafka: []};\n  }\n\n  get(reqInfo: RequestInfo) {\n    console.log(\"Returning mock data\")\n    if (reqInfo.req.url === '/asyncapi/docs') {\n      return reqInfo.utils.createResponse$(() => {\n        return {\n          status: STATUS.OK,\n          body: mockAsyncApi\n        }\n      });\n    } \n    \n    return undefined;\n  }\n}","export class Example {\n\n  public value: string;\n  public lineCount: number;\n\n  constructor(exampleObject: object) {\n    this.value = JSON.stringify(exampleObject, null, 2);\n    this.lineCount = this.value.split('\\n').length;\n  }\n\n}"," \nimport { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class PublisherService {\n\n  constructor(private http: HttpClient) { }\n\n  publishToKafka(topic: string, payload: object): Observable<unknown> {\n    const params = new HttpParams().set('topic', topic);\n    return this.http.post('/asyncapi/kafka/publish', payload, { params });\n  }\n\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}